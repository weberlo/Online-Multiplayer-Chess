/*
 * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 *    this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 *    this list of conditions and the following disclaimer in the documentation
 *    and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 *
 *----------------------------------------------------------------------------*/

/* minified license below  */

/* @license
 * Copyright (c) 2016, Jeff Hlywa (jhlywa@gmail.com)
 * Released under the BSD license
 * https://github.com/jhlywa/chess.js/blob/master/LICENSE
 */

 'use strict';

var Chess = function() {

  /* jshint indent: false */

  // var WHITE = '0';
  // var BLACK = '1';

  const PAWN = 'p';
  const KNIGHT = 'n';
  const BISHOP = 'b';
  const ROOK = 'r';
  const QUEEN = 'q';
  const KING = 'k';

  const EMPTY = '';
  const WALL = 'x';

  var SYMBOLS = 'pnbrqkx';

  // // 2-player (standard)
  // const START_POSITION = [
  //   ['r0', 'n0', 'b0', 'q0', 'k0', 'b0', 'n0', 'r0'],
  //   ['p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0'],
  //   ['',    '',   '',   '',   '',   '',   '',   ''],
  //   ['',    '',   '',   '',   '',   '',   '',   ''],
  //   ['',    '',   '',   '',   '',   '',   '',   ''],
  //   ['',    '',   '',   '',   '',   '',   '',   ''],
  //   ['p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1'],
  //   ['r1', 'n1', 'b1', 'q1', 'k1', 'b1', 'n1', 'r1'],
  // ];

  // // 2-player (diagonal)
  // const START_POSITION = [
  //   ['', '', 'p0', 'r0', 'n0', 'b0', 'k0', 'b0', 'n0', 'r0', 'x'],
  //   ['', 'x', 'x', 'p0', '', '', '', '', '', '', 'r0'],
  //   ['p1', 'x', 'x', '', 'p0', '', '', '', '', '', 'n0'],
  //   ['r1', 'p1', '', '', '', 'p0', '', '', '', '', 'b0'],
  //   ['n1', '', 'p1', '', '', '', 'p0', '', '', '', 'q0'],
  //   ['b1', '', '', 'p1', '', '', '', 'p0', '', '', 'b0'],
  //   ['k1', '', '', '', 'p1', '', '', '', 'p0', '', 'n0'],
  //   ['b1', '', '', '', '', 'p1', '', '', '', 'p0', 'r0'],
  //   ['n1', '', '', '', '', '', 'p1', '', 'x', 'x', 'p0'],
  //   ['r1', '', '', '', '', '', '', 'p1', 'x', 'x', ''],
  //   ['x', 'r1', 'n1', 'b1', 'q1', 'b1', 'n1', 'r1', 'p1', '', '']
  // ];

  // // 3-player (square)
  // const START_POSITION = [
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '', 'r0', 'n0', 'b0', 'q0', 'k0', 'b0', 'n0', 'r0', '', '', '', '', ''],
  //   ['', '', '', '', '', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', 'r2', 'n2', 'b2', 'q2', 'k2', 'b2', 'n2', 'r2', '', '', '', '', ''],
  //   ['', '', '', '', '', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', '', '', '', '', ''],
  //   ['', '', '', '', '', 'r1', 'n1', 'b1', 'q1', 'k1', 'b1', 'n1', 'r1', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', '']
  // ];

  // // 3-player (rectangular)
  // const START_POSITION = [
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '', 'r0', 'n0', 'b0', 'q0', 'k0', 'b0', 'n0', 'r0', '', '', ''],
  //   ['', '', '', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '', 'x',   'x', 'x',   'x',  'x',  'x', 'x',   'x', '', '', ''],
  //   ['', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', ''],
  //   ['', '', '', 'r2', 'n2', 'b2', 'q2', 'k2', 'b2', 'n2', 'r2', '', '', ''],
  //   ['', '', '', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', '', '', ''],
  //   ['', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', ''],
  //   ['', '', '', 'x',   'x', 'x',   'x',  'x',  'x', 'x',   'x', '', '', ''],
  //   ['', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', ''],
  //   ['', '', '', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', '', '', ''],
  //   ['', '', '', 'r1', 'n1', 'b1', 'q1', 'k1', 'b1', 'n1', 'r1', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', ''],
  //   ['', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '']
  // ];

  // // 8-player (rectangle-open)
  // // dims: 28 x 10
  // const START_POSITION = [
  //   [ 'x',  'x',  'x', 'r0', 'n0', 'b0', 'q0', 'k0', 'b0', 'n0', 'r0',  'x', 'r4', 'n4', 'b4', 'q4', 'k4', 'b4', 'n4', 'r4',  'x', 'r6', 'n6', 'b6', 'q6', 'k6', 'b6', 'n6', 'r6',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0',  'x', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4',  'x', 'p6', 'p6', 'p6', 'p6', 'p6', 'p6', 'p6', 'p6',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   ['r1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'r7'],
  //   ['n1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'n7'],
  //   ['b1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'b7'],
  //   ['q1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'q7'],
  //   ['k1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'k7'],
  //   ['b1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'b7'],
  //   ['n1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'n7'],
  //   ['r1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'p7', 'r7'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2',  'x', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3',  'x', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'r2', 'n2', 'b2', 'q2', 'k2', 'b2', 'n2', 'r2',  'x', 'r3', 'n3', 'b3', 'q3', 'k3', 'b3', 'n3', 'r3',  'x', 'r5', 'n5', 'b5', 'q5', 'k5', 'b5', 'n5', 'r5',  'x',  'x',  'x'],
  // ];

  // // 8-player (square-open)
  // const START_POSITION = [
  //   [ 'x',  'x',  'x', 'r3', 'n3', 'b3', 'q3', 'k3', 'b3', 'n3', 'r3',  'x',  'x',  'x', 'r5', 'n5', 'b5', 'q5', 'k5', 'b5', 'n5', 'r5',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3',  'x',  'x',  'x', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   ['r0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r6', 'p6'],
  //   ['n0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n6', 'p6'],
  //   ['b0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'b6', 'p6'],
  //   ['q0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'q6', 'p6'],
  //   ['k0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'k6', 'p6'],
  //   ['b0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'b6', 'p6'],
  //   ['n0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n6', 'p6'],
  //   ['r0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r6', 'p6'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   ['r1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r7', 'p7'],
  //   ['n1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n7', 'p7'],
  //   ['b1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'b7', 'p7'],
  //   ['q1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'q7', 'p7'],
  //   ['k1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'k7', 'p7'],
  //   ['b1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'b7', 'p7'],
  //   ['n1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n7', 'p7'],
  //   ['r1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r7', 'p7'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2',  'x',  'x',  'x', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'r2', 'n2', 'b2', 'q2', 'k2', 'b2', 'n2', 'r2',  'x',  'x',  'x', 'r4', 'n4', 'b4', 'q4', 'k4', 'b4', 'n4', 'r4',  'x',  'x',  'x']
  // ];

  // // 8-player (square-closed)
  // const START_POSITION = [
  //   [ 'x',  'x',  'x', 'r3', 'n3', 'b3', 'q3', 'k3', 'b3', 'n3', 'r3',  'x',  'x',  'x', 'r5', 'n5', 'b5', 'q5', 'k5', 'b5', 'n5', 'r5',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3', 'p3',  'x',  'x',  'x', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5', 'p5',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   ['r0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r6', 'p6'],
  //   ['n0', 'p0',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n6', 'p6'],
  //   ['b0', 'p0',   '',   '',  'x',  'x',  'x',  'x',  'x',  'x',  'x',  'x',   '',   'x',  'x',  'x',  'x',  'x',  'x',  'x',  'x',  '',   '', 'b6', 'p6'],
  //   ['q0', 'p0',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'q6', 'p6'],
  //   ['k0', 'p0',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'k6', 'p6'],
  //   ['b0', 'p0',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'b6', 'p6'],
  //   ['n0', 'p0',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'n6', 'p6'],
  //   ['r0', 'p0',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'r6', 'p6'],
  //   [ 'x',  'x',  'x',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',    '',  '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',  'x',  'x',  'x'],
  //   ['r1', 'p1',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'r7', 'p7'],
  //   ['n1', 'p1',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'n7', 'p7'],
  //   ['b1', 'p1',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'b7', 'p7'],
  //   ['q1', 'p1',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'q7', 'p7'],
  //   ['k1', 'p1',   '',   '',  'x',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   'x',  '',   '', 'k7', 'p7'],
  //   ['b1', 'p1',   '',   '',  'x',  'x',  'x',  'x',  'x',  'x',  'x',  'x',   '',  'x',  'x',  'x',  'x',  'x',  'x',  'x',  'x',   '',   '', 'b7', 'p7'],
  //   ['n1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'n7', 'p7'],
  //   ['r1', 'p1',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '',   '', 'r7', 'p7'],
  //   [ 'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x',   '',   '',   '',   '',   '',   '',   '',   '',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2', 'p2',  'x',  'x',  'x', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4', 'p4',  'x',  'x',  'x'],
  //   [ 'x',  'x',  'x', 'r2', 'n2', 'b2', 'q2', 'k2', 'b2', 'n2', 'r2',  'x',  'x',  'x', 'r4', 'n4', 'b4', 'q4', 'k4', 'b4', 'n4', 'r4',  'x',  'x',  'x']
  // ];

  // // 8-player (dude idk)
  // const START_POSITION = [
  //   ['', '', 'p0', 'r0', 'n0', 'b0', 'q0', 'k0', 'b0', 'n0', 'r0', 'x', 'r1', 'n1', 'b1', 'q1', 'k1', 'b1', 'n1', 'r1', 'p1', '', ''],
  //   ['', 'x', 'p0', '', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', '', 'p1', 'x', ''],
  //   ['p2', 'p2', 'x', 'p0', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p1', 'x', 'p3', 'p3'],
  //   ['r2', '', 'p2', 'x', 'p0', 'p0', 'p0', 'p0', 'p0', 'p0', 'x', '', 'x', 'p1', 'p1', 'p1', 'p1', 'p1', 'p1', 'x', 'p3', '', 'r3'],
  //   ['n2', '', '', 'p2', 'x', '', '', '', '', '', '', 'x', '', '', '', '', '', '', 'x', 'p3', '', '', 'n3'],
  //   ['b2', '', '', 'p2', '', '', '', '', '', 'x', '', 'x', '', 'x', '', '', '', '', '', 'p3', '', '', 'b3'],
  //   ['q2', '', '', 'p2', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'p3', '', '', 'k3'],
  //   ['k2', '', '', 'p2', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p3', '', '', 'q3'],
  //   ['b2', '', '', 'p2', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p3', '', '', 'b3'],
  //   ['n2', '', '', 'p2', '', 'x', '', '', '', '', '', '', '', '', '', '', '', 'x', '', 'p3', '', '', 'n3'],
  //   ['r2', '', '', 'x', '', '', '', '', '', '', 'x', '', 'x', '', '', '', '', '', '', 'x', '', '', 'r3'],
  //   ['x', 'x', 'x', '', 'x', 'x', '', 'x', 'x', '', '', '', '', '', 'x', 'x', '', 'x', 'x', '', 'x', 'x', 'x'],
  //   ['r4', '', '', 'x', '', '', '', '', '', '', 'x', '', 'x', '', '', '', '', '', '', 'x', '', '', 'r5'],
  //   ['n4', '', '', 'p4', '', 'x', '', '', '', '', '', '', '', '', '', '', '', 'x', '', 'p5', '', '', 'n5'],
  //   ['b4', '', '', 'p4', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p5', '', '', 'b5'],
  //   ['k4', '', '', 'p4', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p5', '', '', 'k5'],
  //   ['q4', '', '', 'p4', '', '', '', '', '', '', '', '', '', '', '', '', '', '', '', 'p5', '', '', 'q5'],
  //   ['b4', '', '', 'p4', '', '', '', '', '', 'x', '', 'x', '', 'x', '', '', '', '', '', 'p5', '', '', 'b5'],
  //   ['n4', '', '', 'p4', 'x', '', '', '', '', '', '', 'x', '', '', '', '', '', '', 'x', 'p5', '', '', 'n5'],
  //   ['r4', '', 'p4', 'x', 'p6', 'p6', 'p6', 'p6', 'p6', 'p6', 'x', '', 'x', 'p7', 'p7', 'p7', 'p7', 'p7', 'p7', 'x', 'p5', '', 'r5'],
  //   ['p4', 'p4', 'x', 'p6', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', 'p7', 'x', 'p5', 'p5'],
  //   ['', 'x', 'p6', '', '', '', '', '', '', '', '', 'x', '', '', '', '', '', '', '', '', 'p7', 'x', ''],
  //   ['', '', 'p6', 'r6', 'n6', 'b6', 'q6', 'k6', 'b6', 'n6', 'r6', 'x', 'r7', 'n7', 'b7', 'k7', 'q7', 'b7', 'n7', 'r7', 'p7', '', '']
  // ]

  // 2-player (arena)
  const START_POSITION = [
    [ 'x',  'x', 'n1', 'r1', 'q1', 'k1', 'r1', 'n1',  'x',  'x'],
    [ 'x',  'x',  'x', 'b1', 'p1', 'p1', 'b1',  'x',  'x',  'x'],
    [ 'x',  'x',  'x', 'p1', 'p1', 'p1', 'p1',  'x',  'x',  'x'],
    [  '',   '',   '',   '',   '',   '',   '',   '',   '',   ''],
    [  '',   '',   '',   '',   '',   '',   '',   '',   '',   ''],
    [  '',   '',   '',   '',  'x',  'x',   '',   '',   '',   ''],
    [  '',   '',   '',   '',  'x',  'x',   '',   '',   '',   ''],
    [  '',   '',   '',   '',   '',   '',   '',   '',   '',   ''],
    [  '',   '',   '',   '',   '',   '',   '',   '',   '',   ''],
    [ 'x',  'x',  'x', 'p0', 'p0', 'p0', 'p0',  'x',  'x',  'x'],
    [ 'x',  'x',  'x', 'b0', 'p0', 'p0', 'b0',  'x',  'x',  'x'],
    [ 'x',  'x', 'n0', 'r0', 'q0', 'k0', 'r0', 'n0',  'x',  'x'],
  ];

  // // 4-player (arena)
  // const START_POSITION = [
  //   [  'x',  'x',  'x', 'n1', 'r1', 'q1', 'k1', 'r1', 'n1',  'x',  'x',  'x'],
  //   [  'x',  'x',  'x',  'x', 'b1', 'p1', 'p1', 'b1',  'x',  'x',  'x',  'x'],
  //   [  'x',  'x',   '',  'x', 'p1', 'p1', 'p1', 'p1',  'x',   '',  'x',  'x'],
  //   [ 'n2',  'x',  'x',  'x',   '',   '',   '',   '',  'x',  'x',  'x', 'n3'],
  //   [ 'r2', 'b2', 'p2',   '',   '',   '',   '',   '',   '', 'p3', 'b3', 'r3'],
  //   [ 'q2', 'p2', 'p2',   '',   '',  'x',  'x',   '',   '', 'p3', 'p3', 'q3'],
  //   [ 'k2', 'p2', 'p2',   '',   '',  'x',  'x',   '',   '', 'p3', 'p3', 'k3'],
  //   [ 'r2', 'b2', 'p2',   '',   '',   '',   '',   '',   '', 'p3', 'b3', 'r3'],
  //   [ 'n2',  'x',  'x',  'x',   '',   '',   '',   '',  'x',  'x',  'x', 'n3'],
  //   [  'x',  'x',   '',  'x', 'p0', 'p0', 'p0', 'p0',  'x',   '',  'x',  'x'],
  //   [  'x',  'x',  'x',  'x', 'b0', 'p0', 'p0', 'b0',  'x',  'x',  'x',  'x'],
  //   [  'x',  'x',  'x', 'n0', 'r0', 'q0', 'k0', 'r0', 'n0',  'x',  'x',  'x'],
  // ];

  // // 8-player (arena)
  // const START_POSITION = [
  //   [  'x',  'x',  'x', 'n1', 'r1', 'q1', 'k1', 'r1', 'n1',  'x',  'x',  'x'],
  //   [  'x',  'x',  'x',  'x', 'b1', 'p1', 'p1', 'b1',  'x',  'x',  'x',  'x'],
  //   [  'x',  'x',   '',  'x', 'p1', 'p1', 'p1', 'p1',  'x',   '',  'x',  'x'],
  //   [ 'n2',  'x',  'x',  'x',   '',   '',   '',   '',  'x',  'x',  'x', 'n3'],
  //   [ 'r2', 'b2', 'p2',   '',   '',   '',   '',   '',   '', 'p3', 'b3', 'r3'],
  //   [ 'q2', 'p2', 'p2',   '',   '',  'x',  'x',   '',   '', 'p3', 'p3', 'q3'],
  //   [ 'k2', 'p2', 'p2',   '',   '',  'x',  'x',   '',   '', 'p3', 'p3', 'k3'],
  //   [ 'r2', 'b2', 'p2',   '',   '',   '',   '',   '',   '', 'p3', 'b3', 'r3'],
  //   [ 'n2',  'x',  'x',  'x',   '',   '',   '',   '',  'x',  'x',  'x', 'n3'],
  //   [  'x',  'x',   '',  'x', 'p0', 'p0', 'p0', 'p0',  'x',   '',  'x',  'x'],
  //   [  'x',  'x',  'x',  'x', 'b0', 'p0', 'p0', 'b0',  'x',  'x',  'x',  'x'],
  //   [  'x',  'x',  'x', 'n0', 'r0', 'q0', 'k0', 'r0', 'n0',  'x',  'x',  'x'],
  // ];

  // // 3-player (small)
  // const START_POSITION = [
  //   ['k0', 'q0', '',  ''],
  //   ['', '', '',  'k1'],
  //   ['', '', '',  'q1'],
  //   ['k2', 'q2', '',  ''],
  // ];

  // // 3-player (test that a player does not lose when (1) they are in
  // // checkmate, (2) they are not the next player to go, and (3) the next player
  // // uncheckmates them)
  // const START_POSITION = [
  //   ['k0', '', '', ''],
  //   ['', 'q0', '', 'q1'],
  //   ['', '', '',  'k1'],
  //   ['k2', '', '',  ''],
  // ];

  // // 3-player (insta-win)
  // const START_POSITION = [
  //   ['k0', 'q0', '',  ''],
  //   ['q0', '', '',  'k1'],
  //   ['', '', '',  ''],
  //   ['k2', '', 'q0',  ''],
  // ];

  // // 3-player (insta-lose)
  // const START_POSITION = [
  //   ['k0', '', '',  'q1'],
  //   ['', '', '',  'k1'],
  //   ['q2', '', '',  'q1'],
  //   ['k2', 'q2', '',  ''],
  // ];

  // // 3-player (player 2 stalemate)
  // const START_POSITION = [
  //   ['', '', '', ''],
  //   ['', 'k0', '', 'k1'],
  //   ['q0', '', '',  ''],
  //   ['', 'k2', '',  ''],
  // ];

  // const START_POSITION = [
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', 'p0', '', '', '',   '',   '',   '',   'p1',   '',   '',   '',   '', '', '', '', 'p2', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', 'p3', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', 'p3', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', 'p0', '', '', '',   '',   '',   '',   'p1',   '',   '',   '',   '', '', '', '', 'p2', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', '']
  // ];

  // const START_POSITION = [
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', 'p1', '', '', '',   '',   '',   '',   'p2',   '',   '',   '',   '', '', '', '', 'p3', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', 'p5', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', 'p4', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '', '',    '',   '',   '',   '',   '',   '',   '' , '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', ''],
  //   ['', 'p0', '', '', '',   '',   '',   '',   'p7',   '',   '',   '',   '', '', '', '', 'p6', ''],
  //   ['', '', '', '', '',   '',   '',   '',   '',   '',   '',   '',   '', '', '', '', '', '']
  // ];

  const NUM_ROWS = START_POSITION.length;
  const NUM_COLS = START_POSITION[0].length;
  let players = new Set()
  for (let i = 0; i < START_POSITION.length; i++) {
    for (let j = 0; j < START_POSITION[0].length; j++) {
      let entry = START_POSITION[i][j]
      if (entry.length === 2) {
        players.add(parseInt(entry[1]));
      }
    }
  }
  const NUM_PLAYERS = players.size;
  let remaining_players = Array.from(players).sort()

  var FLAGS = {
    NORMAL: 'n',
    CAPTURE: 'c',
    BIG_PAWN: 'b',
    EP_CAPTURE: 'e',
    PROMOTION: 'p',
    KSIDE_CASTLE: 'k',
    QSIDE_CASTLE: 'q'
  };

  var BITS = {
    NORMAL: 1,
    CAPTURE: 2,
    BIG_PAWN: 4,
    EP_CAPTURE: 8,
    PROMOTION: 16,
    KSIDE_CASTLE: 32,
    QSIDE_CASTLE: 64
  };

  var RANK_1 = 7;
  var RANK_2 = 6;
  var RANK_3 = 5;
  var RANK_4 = 4;
  var RANK_5 = 3;
  var RANK_6 = 2;
  var RANK_7 = 1;
  var RANK_8 = 0;

  // var SQUARES = {
  //   a8:   0, b8:   1, c8:   2, d8:   3, e8:   4, f8:   5, g8:   6, h8:   7,
  //   a7:  16, b7:  17, c7:  18, d7:  19, e7:  20, f7:  21, g7:  22, h7:  23,
  //   a6:  32, b6:  33, c6:  34, d6:  35, e6:  36, f6:  37, g6:  38, h6:  39,
  //   a5:  48, b5:  49, c5:  50, d5:  51, e5:  52, f5:  53, g5:  54, h5:  55,
  //   a4:  64, b4:  65, c4:  66, d4:  67, e4:  68, f4:  69, g4:  70, h4:  71,
  //   a3:  80, b3:  81, c3:  82, d3:  83, e3:  84, f3:  85, g3:  86, h3:  87,
  //   a2:  96, b2:  97, c2:  98, d2:  99, e2: 100, f2: 101, g2: 102, h2: 103,
  //   a1: 112, b1: 113, c1: 114, d1: 115, e1: 116, f1: 117, g1: 118, h1: 119
  // };

  // var ROOKS = {
  //   w: [{square: SQUARES.a1, flag: BITS.QSIDE_CASTLE},
  //       {square: SQUARES.h1, flag: BITS.KSIDE_CASTLE}],
  //   b: [{square: SQUARES.a8, flag: BITS.QSIDE_CASTLE},
  //       {square: SQUARES.h8, flag: BITS.KSIDE_CASTLE}]
  // };

  // var board = new Array(128);
  // var turn = WHITE;
  // var half_moves = 0;
  // var move_number = 1;
  // var history = [];

  var board = null;
  var turn = null;
  var half_moves = null;
  var move_number = null;
  var history = null;

  /* if the user passes in a fen string, load it, else default to
   * starting position
   */
  load(START_POSITION);

  function clear() {
    board = new Array(NUM_ROWS);
    for (let i = 0; i < board.length; i++) {
      board[i] = new Array(NUM_COLS);
      for (let j = 0; j < board[i].length; j++) {
        // need to set them to null otherwise the indices for empty entries
        // aren't even considered to be in the array (useful for `in` checks)
        board[i][j] = null;
      }
    }
    turn = 0;
    half_moves = 0;
    move_number = 1;
    history = [];
  }

  function reset() {
    load(START_POSITION);
  }

  function load(pos) {
    clear();

    console.assert(pos.length == NUM_ROWS);
    console.assert(pos[0].length == NUM_COLS);

    for (let i = 0; i < NUM_ROWS; i++) {
      for (let j = 0; j < NUM_COLS; j++) {
        let piece = pos[i][j];
        if (piece != EMPTY) {
          let type = piece[0];
          let info = {type: type}
          if (type != WALL) {
            info['player'] = parseInt(piece[1]);
          }
          put(i, j, info);
        }
      }
    }

    // TODO parameterize
    turn = 0;

    if (in_checkmate(0)) {
      throw "first player not allowed to start in checkmate"
    }

    return true;
  }

  function get(row, col) {
    var piece = board[row][col];
    return (piece) ? {type: piece.type, player: piece.player} : null;
  }

  function put(row, col, piece) {
    /* check for valid piece object */
    if (!('type' in piece)) {
      return false;
    }
    if (piece.type != WALL && !('player' in piece)) {
      return false;
    }

    /* check for piece */
    if (SYMBOLS.indexOf(piece.type) === -1) {
      return false;
    }

    board[row][col] = piece;

    return true;
  }

  function remove(row, col) {
    var piece = get(row, col);
    board[row][col] = null;
    return piece;
  }

  function build_move(board, from, to, flags, promotion) {
    var move = {
      player: turn,
      from: from,
      to: to,
      flags: flags,
      piece: board[from[0]][from[1]].type
    };

    if (promotion) {
      move.flags |= BITS.PROMOTION;
      move.promotion = promotion;
    }

    let dstPiece = board[to[0]][to[1]];
    if (dstPiece != null) {
      move.captured = {type: dstPiece.type, player: dstPiece.player};
    }
    return move;
  }

  function validLoc(row, col) {
    return row in board && col in board[row]
  }
  function canMoveTo(player, row, col, allowCapture) {
    if (!validLoc(row, col)) return false

    let dstPiece = board[row][col]
    return (
      dstPiece == null ||
      (allowCapture &&
        dstPiece.type != WALL &&
        dstPiece.player != player))
  }
  function canCapture(player, row, col) {
    if (!validLoc(row, col)) return false

    let dstPiece = board[row][col]
    return (
      dstPiece != null &&
      dstPiece.type != WALL &&
      dstPiece.player != player)
  }

  // helper for pieces that can move by a fixed offset each turn (i.e., knight
  // and king)
  function gen_bounded(player, row, col, offsets) {
    let res = [];
    for (let [row_offs, col_offs] of offsets) {
      let dstRow = row + row_offs;
      let dstCol = col + col_offs;
      if (canMoveTo(player, dstRow, dstCol, true)) {
        res.push(build_move(board, /* from */ [row, col], /* to */ [dstRow, dstCol], BITS.NORMAL));
      }
    }
    return res;
  }

  // helper for pieces that can move along a vector until blocked or able to
  // capture (i.e., rook, bishop, queen)
  function gen_unbounded(player, row, col, velocities) {
    let res = [];
    for (let [row_vel, col_vel] of velocities) {
      let row_offs = row_vel;
      let col_offs = col_vel;
      let dstRow = row + row_offs;
      let dstCol = col + col_offs;
      while (canMoveTo(player, dstRow, dstCol, false)) {
        res.push(build_move(board, /* from */ [row, col], /* to */ [dstRow, dstCol], BITS.NORMAL));
        row_offs += row_vel;
        col_offs += col_vel;
        dstRow = row + row_offs;
        dstCol = col + col_offs;
      }
      if (canCapture(player, dstRow, dstCol)) {
        res.push(build_move(board, /* from */ [row, col], /* to */ [dstRow, dstCol], BITS.NORMAL));
      }
    }
    return res;
  }

  function generate_moves_single(player, row, col) {
    if (typeof player === 'undefined') {
      player = turn
    }
    // TODO label moves with BITS.CAPTURE when capturing?
    let GEN_MOVE_DISPATCH = {};
    GEN_MOVE_DISPATCH[PAWN] = (player, row, col) => {
      let res = [];
      for (let [row_offs, col_offs] of [[-1, 0], [1, 0], [0, -1], [0, 1]]) {
        let dstRow = row + row_offs;
        let dstCol = col + col_offs;
        if (canMoveTo(player, dstRow, dstCol, false)) {
          res.push(build_move(board, /* from */[row, col], /* to */[dstRow, dstCol], BITS.NORMAL));
        }
      }
      for (let [row_offs, col_offs] of [[-1, -1], [1, -1], [1, 1], [-1, 1]]) {
        let dstRow = row + row_offs;
        let dstCol = col + col_offs;
        if (canCapture(player, dstRow, dstCol, true)) {
          res.push(build_move(board, /* from */[row, col], /* to */[dstRow, dstCol], BITS.NORMAL));
        }
      }
      return res;
    };
    GEN_MOVE_DISPATCH[KNIGHT] = (player, row, col) => {
      return gen_bounded(player, row, col,
        [[-2, -1], [-1, -2], [1, -2], [2, -1], [2, 1], [1, 2], [-1, 2], [-2, 1]])
    };
    GEN_MOVE_DISPATCH[BISHOP] = (player, row, col) => {
      return gen_unbounded(player, row, col,
        [[-1, -1], [1, -1], [1, 1], [-1, 1]])
    };
    GEN_MOVE_DISPATCH[ROOK] = (player, row, col) => {
      return gen_unbounded(player, row, col,
        [[-1, 0], [1, 0], [0, -1], [0, 1]])
    };
    GEN_MOVE_DISPATCH[QUEEN] = (player, row, col) => {
      return gen_unbounded(player, row, col,
        [[-1, -1], [1, -1], [1, 1], [-1, 1], [-1, 0], [1, 0], [0, -1], [0, 1]])
    };
    GEN_MOVE_DISPATCH[KING] = (player, row, col) => {
      return gen_bounded(player, row, col,
        [[-1, -1], [1, -1], [1, 1], [-1, 1], [-1, 0], [1, 0], [0, -1], [0, 1]])
    };

    let piece = board[row][col];
    if (piece == null || piece.player !== player) {
      return [];
    }
    return GEN_MOVE_DISPATCH[piece.type](player, row, col);
  }

  // function iterBoard(f) {
  //   board.forEach((row, rowIdx, rowArr) => {
  //     row.forEach((piece, colIdx, colArr) => {
  //       // TODO return list of results?
  //       f(rowIdx, colIdx, piece);
  //     });
  //   });
  // }

  function generate_moves(player, legal) {
    if (typeof player === 'undefined') {
      player = turn;
    }
    // let cache_entry = JSON.stringify({player, legal})
    // debugger
    // if (move_cache != null && player in move_cache) {
    //   move_cache
    //   return
    // }

    // generate moves for every piece
    let moves = [];
    for (let row = 0; row < board.length; row++) {
      for (let col = 0; col < board[0].length; col++) {
        let currMoves = generate_moves_single(player, row, col)
        moves = moves.concat(currMoves);
      }
    }

    if (!legal) {
      return moves;
    }

    return moves.filter(move => {
      make_move(move, /* hypothetical */ true);
      let was_in_check = in_check(player);
      undo_move();
      return !was_in_check;
    });
  }

  function in_check(player) {
    if (typeof player === 'undefined') {
      player = turn;
    }
    // TODO only calculate after each move and cache
    let enemies = remaining_players.filter(e => e != player);
    for (let enemy of enemies) {
      let enemy_moves = generate_moves(enemy, false);
      for (let move of enemy_moves) {
        let dstPiece = board[move.to[0]][move.to[1]];
        if (dstPiece != null && dstPiece.player == player && dstPiece.type == KING) {
          return true;
        }
      }
    }
    return false;
  }

  function in_checkmate(player) {
    if (typeof player === 'undefined') {
      player = turn;
    }
    return in_check(player) && generate_moves(player, /* legal */ true).length === 0;
  }

  function in_stalemate(player) {
    if (typeof player === 'undefined') {
      player = turn;
    }
    return !in_check(player) && generate_moves(player, /* legal */ true).length === 0;
  }

  function push(move) {
    history.push({
      move: move,
      turn: turn,
      half_moves: half_moves,
      move_number: move_number
    });
  }

  function next_turn() {
    let players = remaining_players
    if (players.length !== 1) {
      let currPlayerIdx = players.indexOf(turn);
      let nextPlayerIdx = (currPlayerIdx + 1) % players.length;
      if (nextPlayerIdx < currPlayerIdx) {
        // we wrapped around
        move_number++;
      }
      turn = players[nextPlayerIdx];
    }
  }

  function make_move(move, hypothetical) {
    push(move);
    board[move.to[0]][move.to[1]] = board[move.from[0]][move.from[1]];
    board[move.from[0]][move.from[1]] = null;

    if (!hypothetical) {
      // remove all of the next-up players who are mated (skipping over players
      // without any moves) and advance the current turn until we find a player
      // who *can* move
      let new_remaining = new Set(remaining_players)
      next_turn()
      while ((in_stalemate() && new_remaining.size > 2) || in_checkmate()) {
        if (in_checkmate()) {
          new_remaining.delete(turn)
        }
        next_turn()
      }
      remaining_players = Array.from(new_remaining).sort()
    }
  }

  function undo_move() {
    let old = history.pop();
    if (old == null) { return null; }

    let move = old.move;

    turn = old.turn;
    half_moves = old.half_moves;
    move_number = old.move_number;

    let [fromRow, fromCol] = move.from;
    let [toRow, toCol] = move.to;

    board[fromRow][fromCol] = board[toRow][toCol];
    board[fromRow][fromCol].type = move.piece;  // to undo any promotions

    board[toRow][toCol] = null;
    if ('captured' in move) {
      board[toRow][toCol] = {type: move.captured.type, player: move.captured.player};
    }

    return move;
  }

  /*****************************************************************************
   * UTILITY FUNCTIONS
   ****************************************************************************/

  function clone(obj) {
    var dupe = (obj instanceof Array) ? [] : {};

    for (var property in obj) {
      if (typeof property === 'object') {
        dupe[property] = clone(obj[property]);
      } else {
        dupe[property] = obj[property];
      }
    }

    return dupe;
  }

  function trim(str) {
    return str.replace(/^\s+|\s+$/g, '');
  }

  return {
    /***************************************************************************
     * PUBLIC CONSTANTS (is there a better way to do this?)
     **************************************************************************/
    START_POSITION: START_POSITION,
    NUM_PLAYERS: NUM_PLAYERS,
    PAWN: PAWN,
    KNIGHT: KNIGHT,
    BISHOP: BISHOP,
    ROOK: ROOK,
    QUEEN: QUEEN,
    KING: KING,
    FLAGS: FLAGS,

    /***************************************************************************
     * PUBLIC API
     **************************************************************************/
    load: function(fen) {
      return load(fen);
    },

    reset: function() {
      return reset();
    },

    moves: function(player) {
      return generate_moves(player, true);
    },

    moves_single: function(player, row, col, legal) {
      if (typeof legal === 'undefined') {
        legal = true
      }

      let moves = generate_moves_single(player, row, col)
      if (legal) {
        return moves.filter(move => {
          make_move(move, /* hypothetical */ true);
          let was_in_check = in_check(player);
          undo_move();
          return !was_in_check;
        });
      } else {
        return moves
      }
    },

    in_check: function(player) {
      return in_check(player);
    },

    in_checkmate: function(player) {
      return in_checkmate(player);
    },

    in_stalemate: function() {
      return in_stalemate();
    },

    in_draw: function() {
      return half_moves >= 100 ||
             in_stalemate();
    },

    game_over: function() {
      return remaining_players.length === 1 ||
             half_moves >= 100 ||
             in_checkmate() ||
             in_stalemate();
    },

    ascii: function() {
      return ascii();
    },

    turn: function() {
      return turn;
    },

    move: function(move) {
      let move_obj = null;

      let moves = generate_moves(turn, /* legal */ true);

      for (var i = 0, len = moves.length; i < len; i++) {
        // candidate
        let cand = moves[i];
        if (move.from[0] === cand.from[0] && move.from[1] === cand.from[1] &&
          move.to[0] === cand.to[0] && move.to[1] === cand.to[1] &&
          (!('promotion' in cand) ||
            move.promotion === cand.promotion)) {
          move_obj = cand;
          break;
        }
      }

      /* failed to find move */
      if (!move_obj) {
        return null;
      }

      make_move(move_obj, /* hypothetical */ false);

      return move_obj;
    },

    currentPosition: function() {
      let boardCopy = new Array(NUM_ROWS);
      for (let i = 0; i < boardCopy.length; i++) {
        boardCopy[i] = new Array(NUM_COLS);
        for (let j = 0; j < boardCopy[i].length; j++) {
          // TODO make both chessboard.js and chess.js use same board repr
          let piece = board[i][j];
          if (piece == null) {
            boardCopy[i][j] = '';
          } else if (piece.type === WALL) {
            boardCopy[i][j] = WALL
          } else {
            boardCopy[i][j] = piece.type + piece.player;
          }
        }
      }
      return boardCopy;
    },

    remaining_players: function() { return remaining_players },

    undo: function() {
      return undo_move();
    },

    clear: function() {
      return clear();
    },

    put: function(row, col, piece) {
      return put(row, col, piece);
    },

    get: function(row, col) {
      return get(row, col);
    },

    remove: function(row, col) {
      return remove(row, col);
    },

    perft: function(depth) {
      return perft(depth);
    },

    history: function() {
      var reversed_history = [];
      var move_history = [];

      while (history.length > 0) {
        reversed_history.push(undo_move());
      }

      while (reversed_history.length > 0) {
        let move = reversed_history.pop();
        move_history.push(move);
        make_move(move, /* hypothetical */ true);
      }

      return move_history;
    }

  };
};

/* export Chess object if using node or any other CommonJS compatible
 * environment */
if (typeof exports !== 'undefined') exports.Chess = Chess;
/* export Chess object for any RequireJS compatible environment */
if (typeof define !== 'undefined') define( function () { return Chess;  });
